group_by(mtcars,cyl),
disp,hp
),
disp = mean(disp),
hp = mean(hp)
)
# Solution - 6
batting$Team
library(rvest)
library(tidyverse)
html <- read_html("https://bwf.tournamentsoftware.com/ranking/category.aspx?id=36352&category=473&C473FOC=&p=1&ps=100")
foo <- html %>% html_table()
foo <- foo[[1]]
foo <- foo[-101, -c(2,3,4,6)]
foo$Rank <- as.numeric(foo$Rank)
by_conf <- foo %>% group_by(Confederation)
MY.confed_summary <- by_conf %>%
summarize(Avg_rank = mean(Rank), number = n()) %>%
arrange(Avg_rank)
MY.confed_summary
foo[1]
foo <- html %>% html_table()
foo <- foo[[1]]
foo
foo <- foo[-101, -c(2,3,4,6)]
foo
foo$Rank <- as.numeric(foo$Rank)
by_conf <- foo %>% group_by(Confederation)
MY.confed_summary <- by_conf %>%
summarize(Avg_rank = mean(Rank), number = n()) %>%
arrange(Avg_rank)
View(MY.confed_summary)
library(rvest)
library(tidyverse)
# Solution - 1
html <- read_html("https://tldv.io/app/meetings/650ee24cbbbf63001332c3e7")
text <- html%>%html_elements(".sc-fYEEdK.kylWpz.transcript-word")
library(rvest)
library(tidyverse)
# Solution - 1
html <- read_html("https://tldv.io/app/meetings/650ee24cbbbf63001332c3e7")
text <- html%>%html_elements(".sc-fYEEdK")
text <- html%>%html_elements(".sc-fYEEdK")
text <- html%>%html_table()
install.packages("rcpp")
install.packages("Rcpp")
library(Rcpp)
clear
cppFunction("
int addC (x+y){
return x+y;
}
")
cppFunction("
int addC (int x, int y){
return x+y;
}
")
clear
addC(5,10)
addR = function(x,y){
return (x+y)
}
addR(5,10)
addC(5,10)
addR(5,10)
benchmark
?benchmark
benchmark(addR, addC)
library(rbenchmark)
benchmark(addR, addC)
benchmark(addR(5,10), addC(5,10))
func <- function(vec)
{
n <- length(vec)
sum.log <- log(prod(vec))
log.of.vec <- numeric(length(n))
frac <- log.of.vec/sum.log
return(frac)
}
clear
func1 <- function(vec)
{
n <- length(vec)
sum.log <- log(prod(vec))
log.of.vec <- numeric(length(n))
frac <- log.of.vec/sum.log
return(frac)
}
func2 <- function(vec)
{
n <- length(vec)
# for tracking sum and log
sum.log <- 0
log.of.vec <- numeric(length(n))
# calculating logs and sum for each element
for(i in 1:n)
{
log.of.vec[i] <- log(vec[i])
sum.log <- sum.log + log.of.vec[i]
}
# fraction
frac <- log.of.vec/sum.log
return(frac)
}
func1(1:1e4)
func2(1:1e4)
cppFunction("
NumericVector funcC (NumericVector x){
double track = 0;
int n = x.size();
NumericVector logx = x;
NumericVector ret = x;
for(int i=0; i<n; i++){
logx[i] = log(x[i]);
track += log(x[i]);
}
for(int j=0; j<n; j++){
rtn[j] = logx[j]/track;
}
return rtn;
}
")
cppFunction("
NumericVector funcC (NumericVector x){
double track = 0;
int n = x.size();
NumericVector logx = x;
NumericVector rtn = x;
for(int i=0; i<n; i++){
logx[i] = log(x[i]);
track += log(x[i]);
}
for(int j=0; j<n; j++){
rtn[j] = logx[j]/track;
}
return rtn;
}
")
vec <- 1:10
all.equal(funcR(vec), funcC(vec))
funcR <- function(vec)
{
temp <- log(vec)
return(temp/sum(temp))
}
vec <- 1:10
all.equal(funcR(vec), funcC(vec))
vec <- 1:1e5
benchmark(func(vec), funcR(vec), funcC(vec))
x <- matrix(1:10, ncol = 2, nrow = 5)
y <- matrix(seq(2, 20, by = 2), ncol = 2, nrow = 5)
cppFunction("
NumericMatrix addC(NumericMatix x,NumericMatix y ){
int n = x.nrow()
int m = y.ncol()
NumericMatrix out(n,m);
for(int i=0; i<n; i++){
for(int j=0, j<m , j++){
out(i,j) = x(i,j) + y(i,j)
}
}
return out;
}
")
library(Rcpp)
x <- matrix(1:10, ncol = 2, nrow = 5)
y <- matrix(seq(2, 20, by = 2), ncol = 2, nrow = 5)
cppFunction("
NumericMatrix addC(NumericMatix x,NumericMatix y ){
int n = x.nrow()
int m = y.ncol()
NumericMatrix out(n,m);
for(int i=0; i<n; i++){
for(int j=0, j<m , j++){
out(i,j) = x(i,j) + y(i,j)
}
}
return out;
}
")
cppFunction("
NumericMatrix addC(NumericMatix x,NumericMatix y ){
int n = x.nrow()
int m = y.ncol()
NumericMatrix out(n,m);
for(int i=0; i<n; i++){
for(int j=0, j<m , j++){
out(i,j) = x(i,j) + y(i,j);
}
}
return out;
}
")
cppFunction("
NumericMatrix addC(NumericMatix x,NumericMatix y ){
int n = x.nrow();
int m = y.ncol();
NumericMatrix out(n,m);
for(int i=0; i<n; i++){
for(int j=0, j<m , j++){
out(i,j) = x(i,j) + y(i,j);
}
}
return out;
}
")
cppFunction("
NumericMatrix addC(NumericMatix x,NumericMatix y ){
int n = x.nrow();
int m = y.ncol();
NumericMatrix out(n,m);
for(int i=0; i<n; i++){
for(int j=0; j<m; j++){
out(i,j) = x(i,j) + y(i,j);
}
}
return out;
}
")
cppFunction("
NumericMatrix addC(NumericMatrix x,NumericMatrix y ){
int n = x.nrow();
int m = y.ncol();
NumericMatrix out(n,m);
for(int i=0; i<n; i++){
for(int j=0; j<m; j++){
out(i,j) = x(i,j) + y(i,j);
}
}
return out;
}
")
addC(x,y)
shiny::runApp('MTH208/class-project-group_2/Group-2_Anime_Project')
1 + 1
#| echo: false
2 * 2
shiny::runApp('MTH208/class-project-group_2/Group-2_Anime_Project')
runApp('MTH208/class-project-group_2/Group-2_Anime_Project')
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar()
library(ggplot2)
MainData <- read.csv("Finaldata.csv")
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar()
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar(stat = "identity")
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar(stat = "identity")+xlims(0,50)
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar(stat = "identity")+xlims(0,50)
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar(stat = "identity")+
lims(x = c(0,50))
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar(stat = "identity")+
lims(x = (10,50))
ggplot(MainData,
mapping = aes(Episode.Count,Score))+
geom_bar(stat = "identity")+
lims(x = c(10,50))
catagories <- data.frame()
catagories$Classes <- c(1:10)*5
catagories <- data.frame(c(1:10)*5)
catagories
catagories <- data.frame(classes = c(1:10)*5)
catagories
---
## Introduction
The term "Anime" refers to all animated motion pictures that are produced in Japan. This is a booming industry with an ever-increasing audience and rising popularity. Naturally, this becomes an excellent opportunity for studios to make massive profits and an exciting field for one to study.
for(i in length(catagories$classes)){
subdata <- subset(MainData,
(MainData$Episode.Count < 5*i) &
((5*i -5)<= MainData$Episode.Count)
)
catagories$Avg[i] = mean(subdata$Members)
}
catagories
subdata <- subset(MainData,
(MainData$Episode.Count < 5*1) &
((5*1 -5)<= MainData$Episode.Count)
)
subdata
subdata$Members
---
## Introduction
The term "Anime" refers to all animated motion pictures that are produced in Japan. This is a booming industry with an ever-increasing audience and rising popularity. Naturally, this becomes an excellent opportunity for studios to make massive profits and an exciting field for one to study.
for(i in length(catagories$classes)){
subdata <- subset(MainData,
(MainData$Episode.Count < 5*i) &
((5*i -5)<= MainData$Episode.Count)
)
print(length(subdata$Members))
catagories$Avg[i] = mean(subdata$Members)
}
for(i in 1:length(catagories$classes)){
subdata <- subset(MainData,
(MainData$Episode.Count < 5*i) &
((5*i -5)<= MainData$Episode.Count)
)
print(length(subdata$Members))
catagories$Avg[i] = mean(subdata$Members)
}
catagories
catagories <- data.frame(classes = c(1:15)*5)
for(i in 1:length(catagories$classes)){
subdata <- subset(MainData,
(MainData$Episode.Count < 5*i) &
((5*i -5)<= MainData$Episode.Count)
)
catagories$Avg[i] = mean(subdata$Members)
}
ggplot(catagories,
mapping = aes(classes,Avg))+
geom_bar(stat = "identity")+
lims(x = c(10,50))
catagories <- data.frame(classes = c(1:15)*5)
for(i in 1:length(catagories$classes)){
subdata <- subset(MainData,
(MainData$Episode.Count < 5*i) &
((5*i -5)<= MainData$Episode.Count)
)
catagories$Avg[i] = mean(subdata$Score)
}
ggplot(catagories,
mapping = aes(classes,Avg))+
geom_bar(stat = "identity")+
lims(x = c(10,50))
genres <- as.data.frame(table(MainData$Genre))
genres <- genres[order(genres$Freq,decreasing = TRUE),]
genres[1:5,]
genres <- as.data.frame(table(MainData$Genre))
genres <- genres[order(genres$Freq,decreasing = TRUE),]
genres <- genres[1:5,]
for(i in 1:length(genres$Var1)){
subdata = subset(MainData,
MainData$Genre == genres$Var1[i])
avg = mean(subdata$Percent.red)
genres$Avg[i] = avg
}
ggplot(genres,
mapping = aes(x = Var1, y = Avg*100))+
geom_bar(stat = "identity")+
labs(x= "Genres", y = "Percentage Red Composition")
genres <- as.data.frame(table(MainData$Genre))
genres <- genres[order(genres$Freq,decreasing = TRUE),]
genres <- genres[1:5,]
for(i in 1:length(genres$Var1)){
subdata = subset(MainData,
MainData$Genre == genres$Var1[i])
avg = mean(subdata$Percent.red)
genres$Avg[i] = avg
}
ggplot(genres,
mapping = aes(x = Var1, y = Avg*100))+
geom_bar(stat = "identity",col = 'red')+
labs(x= "Genres", y = "Percentage Red Composition")
genres <- as.data.frame(table(MainData$Genre))
genres <- genres[order(genres$Freq,decreasing = TRUE),]
genres <- genres[1:5,]
for(i in 1:length(genres$Var1)){
subdata = subset(MainData,
MainData$Genre == genres$Var1[i])
avg = mean(subdata$Percent.red)
genres$Avg[i] = avg
}
ggplot(genres,
mapping = aes(x = Var1, y = Avg*100))+
geom_bar(stat = "identity",fill = 'red')+
labs(x= "Genres", y = "Percentage Red Composition")
read.csv("Finaldata.csv")
setwd("~/MTH208/class-project-group_2")
read.csv("Finaldata.csv")
MainData <- read.csv("Finaldata.csv")
MainData$Release.Year
subdata <- subset(MainData, MainData$Release.Year != NA)
MainData$Release.Year <- as.numeric(MainData$Release.Year)
View(MainData)
subdata <- subset(MainData, MainData$Release.Year != NA)
subdata <- subset(MainData, MainData$Release.Year > 0)
ggplot(subdata,
mapping = aes(x = Score, y = Type))+
geom_boxplot(aes(col = Release.Year))
library(ggplot2)
ggplot(subdata,
mapping = aes(x = Score, y = Type))+
geom_boxplot(aes(col = Release.Year))
View(subdata)
ageGroups <- as.data.frame(table(MainData$Rating))
View(ageGroups)
library(dplyr)
library(tidyverse)
subdata <- as.tibble(subdata)
subdata <- as_tibble(subdata)
View(subdata)
subsub <- subdata %>% group_by(Genre)
View(subsub)
subsub <- subdata %>%
group_by(Genre) %>%
summarise(
Avg = mean(Score)
)
View(subsub)
subsorted <- as.data.frame(subsub)
View(subsorted)
subsorted <- subsorted[order(subsorted$Avg,decreasing = TRUE),]
subsorted[1]
subsorted[1,]
subsorted$Genre[1]
ageGroups <- as.data.frame(table(MainData$Rating))
for(i in 1:length(ageGroups$Var1)){
subdata <- subset(MainData,
MainData$Rating == ageGroups$Var1[i])
subdata <- as_tibble(subdata)
subsub <- subdata %>%
group_by(Genre) %>%
summarise(
Avg = mean(Score)
)
subsorted <- as.data.frame(subsub)
subsorted <- subsorted[order(subsorted$Avg,decreasing = TRUE),]
ageGroups$PopGen[i] <- subsorted$Genre[1]
ageGroups$PopGenFreq[i] <- subsorted$Avg[1]
}
ggplot(ageGroups,
mapping = aes(x = Var1, y = PopGenFreq))+
geom_bar(mapping = (fill = PopGen), stat = "identity")
ggplot(ageGroups,
mapping = aes(x = Var1, y = PopGenFreq))+
geom_bar(mapping = aes(fill = PopGen), stat = "identity")
ageGroups$Var1[1] = "G - All"
ageGroups$Var1[2] = "PG - Children"
ageGroups$Var1[3] = "PG 13"
ageGroups$Var1[4] = "R - 17+"
ageGroups$Var1[5] = "R+ - Adult"
ageGroups$Var1[1] = "All"
ageGroups$Var1[2] = "Children"
ageGroups$Var1[3] = "13+"
ageGroups$Var1[4] = "17+"
ageGroups$Var1[5] = "Adult"
ageGroups <- as.data.frame(table(MainData$Rating))
for(i in 1:length(ageGroups$Var1)){
subdata <- subset(MainData,
MainData$Rating == ageGroups$Var1[i])
subdata <- as_tibble(subdata)
subsub <- subdata %>%
group_by(Genre) %>%
summarise(
Avg = mean(Score)
)
subsorted <- as.data.frame(subsub)
subsorted <- subsorted[order(subsorted$Avg,decreasing = TRUE),]
ageGroups$PopGen[i] <- subsorted$Genre[1]
ageGroups$PopGenFreq[i] <- subsorted$Avg[1]
}
ageGroups$Var1 <- c("All", "Children", "13+", "17+", "Adult")
ageGroups <- as.data.frame(table(MainData$Rating))
for(i in 1:length(ageGroups$Var1)){
subdata <- subset(MainData,
MainData$Rating == ageGroups$Var1[i])
subdata <- as_tibble(subdata)
subsub <- subdata %>%
group_by(Genre) %>%
summarise(
Avg = mean(Members)
)
subsorted <- as.data.frame(subsub)
subsorted <- subsorted[order(subsorted$Avg,decreasing = TRUE),]
ageGroups$PopGen[i] <- subsorted$Genre[1]
ageGroups$PopGenFreq[i] <- subsorted$Avg[1]
}
ageGroups$Var1 <- c("All", "Children", "PG-13", "R-17+", "R+ -Adult")
ggplot(ageGroups,
mapping = aes(x = Var1, y = PopGenFreq))+
geom_bar(mapping = aes(fill = PopGen), stat = "identity")+
labs(x = "Target Demographic", y = "Average Rating", fill = "Most Popular Genre")
studios <- as.data.frame(table(MainData$Studio))
View(studios)
studios <- studios[which(studios$Freq>10, arr.ind = TRUE),]
studiosmax <- studios[which(studios$Freq>20, arr.ind = TRUE),]
studiosmax <- studios[which(studios$Freq>30, arr.ind = TRUE),]
View(studiosmax)
studios <- as.data.frame(table(MainData$Studio))
studios <- studios[which(studios$Freq>30, arr.ind = TRUE),]
for(i in 1:length(studios$Var1)){
subdata <- subset(MainData,
MainData$Studio == studios$Var1[i])
studios$Avg[i] <- mean(subdata$Members)
}
ggplot(studios,
mapping = aes(x = Var1, y = Avg))+
geom_bar(stat = "identity")
studios <- as.data.frame(table(MainData$Studio))
studios <- studios[which(studios$Freq>30, arr.ind = TRUE),]
for(i in 1:length(studios$Var1)){
subdata <- subset(MainData,
MainData$Studio == studios$Var1[i])
studios$Avg[i] <- mean(subdata$Members)
}
ggplot(studios,
mapping = aes(x = Var1, y = Avg))+
geom_bar(stat = "identity")+
labs(x = "Genre", y = "Average Viewership")
shiny::runApp('Group-2_Anime_Project')
