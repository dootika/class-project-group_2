library(imager)
# 8
install.packages("imager")
library(imager)
?seq
odd.nums <- seq.int(from = 1 , by = 2, length.out = 1e3)
odd.nums
fibo <- function(n){
if (n<= 1){
return (1)
}
return (fibo(n-1)+fibo(n-2))
}
foo <- c(1:500)
fibos <- fibo(foo)
fibos <- fibo(foo)
fibos <- array(NA, dim=c(500))
for(i in 1:500){
fibos[i] <- fibo(i)
}
fibos <- array(NA, dim=c(500))
for(i in 1:100){
fibos[i] <- fibo(i)
}
fibos <- array(NA, dim=c(500))
for(i in 1:10){
fibos[i] <- fibo(i)
}
fibos
retbitch <- function(){
out <- sample(1:6 , size = 1)
return (out)
}
retbitch()
retbitch()
retbitch <- function(){
out <- sample(1:6 , size = 1)
return (out%%2)
}
retbitch()
retbitch <- function(){
out <- sample(1:6 , size = 1)
return (!(out%%2))
}
retbitch()
retbitch <- function(){
out <- sample(1:6 , size = 1)
return (!(out%%2))
}
retbitch()
retbitch <- function(){
out <- sample(1:6 , size = 1)
return (!(out%%2))
}
retbitch()
retbitch <- function(){
out <- sample(1:6 , size = 1)
return (1 -(out%%2))
}
retbitch()
retbitch <- function(){
out <- sample(1:6 , size = 1)
return (1 -(out%%2))
}
retbitch()
retbitch <- function(){
set <- rbinom(n=15 , size = 1 , prob = 0.5)
score <- sum(set)
if (score >8){
print("win")
}
else{
print("Lose")
}
}
retbitch()
retbitch()
retbitch()
mat <- matrix(1, nrow = 5 , nrow = 5)
mat
mat <- matrix(data = 1 , nrow =1 , ncol = 1)
mat
mat <- matrix(data = 1 , nrow =5 , ncol = 5)
mat
mat <- diag(x = c(1:5) , 5, 5)
mat
mat <- matrix(0,10,10)
for(i in 1:10){
for(j inn 1:10){
for(i in 1:10){
for(j in 1:10){
mat[i,j] <- sample(1:6, 1)
}
}
mat
n <- readline()
rho <- readline()
mat <- matrix (rho, n ,n)
n <- numeric(readline())
rho <- numeric(readline())
mat <- matrix (rho, n ,n)
n <- numeric(readline())
n <- numeric(readline())
rho <- numeric(readline())
print(n,rho)
n <- integer(readline())
rho <- integer(readline())
print(n,rho)
n <- as.integer(readline())
rho <- as.integer(readline())
print(n,rho)
mat <- matrix (rho, n ,n)
for(i in 1:n){
mat[i,i] = 1
}
mat
for(i in 1:n){
for(j in 1:n){
mat[i,j] <- rho**abs(i-j)
}
}
mat
mat <- scan()
mat
n <- as.integer(readline())
mat <- scan()
mat <- as.matrix(mat)
mat
n <- as.integer(readline())
mat <- scan()
mat <- as.matrix(mat, dim = (n,n))
mat <- as.matrix(mat, dim = c(n,n))
mat
mat <- as.array(mat, dim = c(n,n))
mat <- matrix(mat, n , n)
mat
mat <- array(1,c(10,4,6,5) )
mat
?runif
ran <- runif(1e3)
ran
ran <- runif(1e3)
score <- 0
for(i in 1:1e3){
if .1< ran[i] < .2{
for(i in 1:1e3){
if (.1< ran[i] < .2){
for(i in 1:1e3){
if (0.1< ran[i] < 0.2){
for(i in 1:1e3){
if (0.1< ran[i] & ran[i] < 0.2){
score = score +1
}
}
score
# HARRY POTTER
retnum <- function(){
out <- c(0,0,0,0,0,0,0)
score <- 0
while(0 in retnum){
# HARRY POTTER
retnum <- function(){
out <- c(0,0,0,0,0,0,0)
score <- 0
while(sum(retnum) < sum(1:7) ){
foo <- sample(1:7 , 1 , replace = TRUE , prob = (0.25,.2,.2,.15,.1,.05,.05))
# HARRY POTTER
retnum <- function(){
out <- c(0,0,0,0,0,0,0)
score <- 0
while(sum(out) < sum(1:7) ){
foo <- sample(1:7 , 1 , replace = TRUE , prob = (0.25,.2,.2,.15,.1,.05,.05))
# HARRY POTTER
retnum <- function(){
out <- c(0,0,0,0,0,0,0)
score <- 0
while(sum(out) < sum(1:7) ){
foo <- sample(1:7 , 1 , replace = TRUE , prob = c(0.25,.2,.2,.15,.1,.05,.05))
out[foo] <- foo
score <- scpre + 1
}
return(score)
}
print(retnum())
# HARRY POTTER
retnum <- function(){
out <- c(0,0,0,0,0,0,0)
score <- 0
while(sum(out) < sum(1:7) ){
foo <- sample(1:7 , 1 , replace = TRUE , prob = c(0.25,.2,.2,.15,.1,.05,.05))
out[foo] <- foo
score <- score + 1
}
return(score)
}
print(retnum())
# HARRY POTTER
retnum <- function(){
out <- c(0,0,0,0,0,0,0)
score <- 0
while(sum(out) < sum(1:7) ){
foo <- sample(1:7 , 1 , replace = TRUE , prob = c(0.25,.2,.2,.15,.1,.05,.05))
out[foo] <- foo
score <- score + 1
}
return(score)
}
print(retnum())
outs <- array(NA, 1e3)
for(i in 1:1e3){
outs[i] = retnum()
}
mean(outs)
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
bottle[1e2] <- 0
score <- score + 1
}
else{
return(score + 1)
}
}
}
retnum()
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
bottle[1e2] <- 0
score <- score + 1
}
else{
return(score + 1)
}
}
}
retnum()
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
score <- score + 1
bottle[score] <- 0
}
else{
return(score + 1)
}
}
}
retnum()
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
score <- score + 1
bottle[score] <- 0
}
else{
return(score + 1)
}
}
}
retnum()
# MONTY HALL
MontyHall = function(){
door <- 1
win.door <- sample(1:3, 1)
if (door == win.door){
return(0)
}
else{return (1)}
}
outs <- array(NA,1e3)
for(i in 1:1e3){
outs[i] = MontyHall()
}
mean(outs)
library(rvest)
library(tidyverse)
library(dplyr)
html <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
movies <- html %>% html_elements(".article_movie_title") %>% html_text()
movies
movies <- html %>% html_elements(".article_movie_title.h2") %>% html_text()
movies
movies <- html %>% html_elements(".article_movie_title") %>% html_text()
movies
length("\n                          ")
movies <- substring(movies,15)
movies
movies <- substring(movies,5)
movies
movies <- substring(movies,5)
movies
movies <- substring(movies,5)
movies
movies <- substring(movies,1)
movies
movies <- substring(movies,1)
movies
movies <- substring(movies,2)
movies
movies <- html %>% html_elements(".article_movie_title.a") %>% html_text()
movies <- substring(movies,5)
movies
movies <- html %>% html_elements(".article_movie_title") %>% html_text()
movies[1]
substring(movies[1],16,length(movies[1])-15)
substring(movies[1],16,length(movies[1])-15)
length(movies[1])
substring(movies[1],16,nchar(movies[1])-15)
substring(movies[1],26,nchar(movies[1])-25)
substring(movies[1],31,nchar(movies[1])-25)
substring(movies[1],32,nchar(movies[1])-25)
substring(movies[1],26,nchar(movies[1])-25)
substring(movies[1],28,nchar(movies[1])-25)
?strsplit
names <- array(NA, dim = 100)
for(i in 1:length(movies)){
name<- substring(movies[i],28,nchar(movies[1])-25)
}
for(i in 1:length(movies)){
name<- substring(movies[i],28,nchar(movies[1])-25)
names[i] = name
}
names
strsplit(movies[1], " ")
names <- array(NA, dim = 100)
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (word != "" || word != "\n"){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (word != "\n"){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (TRUE){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (!(word == "")){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (!(nchar(word) == 1 && word == "")){
print(word)
}
}
names[i] = name
}
## Problem - 2
html <- read_html("https://en.wikipedia.org/wiki/United_States_at_the_Olympics")
## Problem - 2
html <- read_html("https://en.wikipedia.org/wiki/United_States_at_the_Olympics")
##Problem - 3
html <- read_html("https://stats.stackexchange.com/questions?tab=Votes")
questions <- html%>%html_elements(".s-post-summary--content")%>%html_text()
questions
questions <- html%>%html_elements(".s-post-summary--content.s-post-summary--content-title")%>%html_text()
questions
questions <- html%>%html_elements(".s-post-summary--content-title")%>%html_text()
questions
questions <- html%>%html_elements(".s-link")%>%html_text()
questions
questions <- questions[2:16]
questions
Votes <- html%>%html_elements(".s-post-summary--stats-item-number")%>%html_text()
votes
Votes
Votes_data <- html%>%html_elements(".s-post-summary--stats-item-number")%>%html_text()
Votes <- Votes_data[seq(1,length(Votes_data),3)]
Votes
Views <- Votes_data[seq(3,length(Votes_data),3)]
Views
Answers <- Votes_data[seq(2,length(Votes_data),3)]
Answers
starwars %>% slice(5:10)
starwars %>% slice_head(n = 3)
starwars %>% slice_sample(n = 5)
starwars %>% slice_sample(prop = 0.1)
starwars %>%
filter(!is.na(height)) %>%
slice_max(height, n = 3)
starwars %>% mutate(height_m = height / 100)
starwars %>% summarise(height = mean(height, na.rm = TRUE))
starwars
a1 <- group_by(starwars, species, sex)
a2 <- select(a1, height, mass)
a3 <- summarise(a2,
height = mean(height, na.rm = TRUE),
mass = mean(mass, na.rm = TRUE)
)
starwars %>%
group_by(species, sex) %>%
select(height, mass) %>%
summarise(
height = mean(height, na.rm = TRUE),
mass = mean(mass, na.rm = TRUE)
)
starwars
# SOLUTION-4
mtcars
# SOLUTION - 5
summarise(
select(
group_by(mtcars,cyl),
disp,hp
),
disp = mean(disp),
hp = mean(hp)
)
# Solution - 6
batting$Team
library(rvest)
library(tidyverse)
html <- read_html("https://bwf.tournamentsoftware.com/ranking/category.aspx?id=36352&category=473&C473FOC=&p=1&ps=100")
foo <- html %>% html_table()
foo <- foo[[1]]
foo <- foo[-101, -c(2,3,4,6)]
foo$Rank <- as.numeric(foo$Rank)
by_conf <- foo %>% group_by(Confederation)
MY.confed_summary <- by_conf %>%
summarize(Avg_rank = mean(Rank), number = n()) %>%
arrange(Avg_rank)
MY.confed_summary
foo[1]
foo <- html %>% html_table()
foo <- foo[[1]]
foo
foo <- foo[-101, -c(2,3,4,6)]
foo
foo$Rank <- as.numeric(foo$Rank)
by_conf <- foo %>% group_by(Confederation)
MY.confed_summary <- by_conf %>%
summarize(Avg_rank = mean(Rank), number = n()) %>%
arrange(Avg_rank)
View(MY.confed_summary)
library(rvest)
library(tidyverse)
# Solution - 1
html <- read_html("https://tldv.io/app/meetings/650ee24cbbbf63001332c3e7")
text <- html%>%html_elements(".sc-fYEEdK.kylWpz.transcript-word")
library(rvest)
library(tidyverse)
# Solution - 1
html <- read_html("https://tldv.io/app/meetings/650ee24cbbbf63001332c3e7")
text <- html%>%html_elements(".sc-fYEEdK")
text <- html%>%html_elements(".sc-fYEEdK")
text <- html%>%html_table()
MainData <- read.csv("../Finaldata.csv")
setwd("~/MTH208/class-project-group_2/Group-2_Anime_Project")
MainData <- read.csv("../Finaldata.csv")
for(i in 1:1e3){
ind = which.max(c(MainData$Percent.red[i],MainData$Percent.green[i],MainData$Percent.blue[i]))
MainData$MainCol[i] <- c("Red","Green","Blue")[ind]
}
genres <- as.data.frame(table(MainData$Genre))
ggplot(genres, aes(x="", y=Freq, fill = Var1))+
geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0)+
theme_void()+
labs(fill = "Genre")
library(ggplot2)
ggplot(genres, aes(x="", y=Freq, fill = Var1))+
geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0)+
theme_void()+
labs(fill = "Genre")
shiny::runApp()
runApp()
runApp()
