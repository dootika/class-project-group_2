out <- c(0,0,0,0,0,0,0)
score <- 0
while(sum(out) < sum(1:7) ){
foo <- sample(1:7 , 1 , replace = TRUE , prob = c(0.25,.2,.2,.15,.1,.05,.05))
out[foo] <- foo
score <- score + 1
}
return(score)
}
print(retnum())
outs <- array(NA, 1e3)
for(i in 1:1e3){
outs[i] = retnum()
}
mean(outs)
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
bottle[1e2] <- 0
score <- score + 1
}
else{
return(score + 1)
}
}
}
retnum()
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
bottle[1e2] <- 0
score <- score + 1
}
else{
return(score + 1)
}
}
}
retnum()
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
score <- score + 1
bottle[score] <- 0
}
else{
return(score + 1)
}
}
}
retnum()
# DRUG ADDICT
retnum <- function(){
bottle <- array(1, 1e2)
score <- 0
while(TRUE){
foo <- sample(bottle,1)
if (foo == 1){
score <- score + 1
bottle[score] <- 0
}
else{
return(score + 1)
}
}
}
retnum()
# MONTY HALL
MontyHall = function(){
door <- 1
win.door <- sample(1:3, 1)
if (door == win.door){
return(0)
}
else{return (1)}
}
outs <- array(NA,1e3)
for(i in 1:1e3){
outs[i] = MontyHall()
}
mean(outs)
library(rvest)
library(tidyverse)
library(dplyr)
html <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
movies <- html %>% html_elements(".article_movie_title") %>% html_text()
movies
movies <- html %>% html_elements(".article_movie_title.h2") %>% html_text()
movies
movies <- html %>% html_elements(".article_movie_title") %>% html_text()
movies
length("\n                          ")
movies <- substring(movies,15)
movies
movies <- substring(movies,5)
movies
movies <- substring(movies,5)
movies
movies <- substring(movies,5)
movies
movies <- substring(movies,1)
movies
movies <- substring(movies,1)
movies
movies <- substring(movies,2)
movies
movies <- html %>% html_elements(".article_movie_title.a") %>% html_text()
movies <- substring(movies,5)
movies
movies <- html %>% html_elements(".article_movie_title") %>% html_text()
movies[1]
substring(movies[1],16,length(movies[1])-15)
substring(movies[1],16,length(movies[1])-15)
length(movies[1])
substring(movies[1],16,nchar(movies[1])-15)
substring(movies[1],26,nchar(movies[1])-25)
substring(movies[1],31,nchar(movies[1])-25)
substring(movies[1],32,nchar(movies[1])-25)
substring(movies[1],26,nchar(movies[1])-25)
substring(movies[1],28,nchar(movies[1])-25)
?strsplit
names <- array(NA, dim = 100)
for(i in 1:length(movies)){
name<- substring(movies[i],28,nchar(movies[1])-25)
}
for(i in 1:length(movies)){
name<- substring(movies[i],28,nchar(movies[1])-25)
names[i] = name
}
names
strsplit(movies[1], " ")
names <- array(NA, dim = 100)
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (word != "" || word != "\n"){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (word != "\n"){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (TRUE){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (!(word == "")){
print(word)
}
}
names[i] = name
}
for(i in 1:length(movies)){
words <- strsplit(movies[1], " ")
for(word in words){
if (!(nchar(word) == 1 && word == "")){
print(word)
}
}
names[i] = name
}
## Problem - 2
html <- read_html("https://en.wikipedia.org/wiki/United_States_at_the_Olympics")
## Problem - 2
html <- read_html("https://en.wikipedia.org/wiki/United_States_at_the_Olympics")
##Problem - 3
html <- read_html("https://stats.stackexchange.com/questions?tab=Votes")
questions <- html%>%html_elements(".s-post-summary--content")%>%html_text()
questions
questions <- html%>%html_elements(".s-post-summary--content.s-post-summary--content-title")%>%html_text()
questions
questions <- html%>%html_elements(".s-post-summary--content-title")%>%html_text()
questions
questions <- html%>%html_elements(".s-link")%>%html_text()
questions
questions <- questions[2:16]
questions
Votes <- html%>%html_elements(".s-post-summary--stats-item-number")%>%html_text()
votes
Votes
Votes_data <- html%>%html_elements(".s-post-summary--stats-item-number")%>%html_text()
Votes <- Votes_data[seq(1,length(Votes_data),3)]
Votes
Views <- Votes_data[seq(3,length(Votes_data),3)]
Views
Answers <- Votes_data[seq(2,length(Votes_data),3)]
Answers
starwars %>% slice(5:10)
starwars %>% slice_head(n = 3)
starwars %>% slice_sample(n = 5)
starwars %>% slice_sample(prop = 0.1)
starwars %>%
filter(!is.na(height)) %>%
slice_max(height, n = 3)
starwars %>% mutate(height_m = height / 100)
starwars %>% summarise(height = mean(height, na.rm = TRUE))
starwars
a1 <- group_by(starwars, species, sex)
a2 <- select(a1, height, mass)
a3 <- summarise(a2,
height = mean(height, na.rm = TRUE),
mass = mean(mass, na.rm = TRUE)
)
starwars %>%
group_by(species, sex) %>%
select(height, mass) %>%
summarise(
height = mean(height, na.rm = TRUE),
mass = mean(mass, na.rm = TRUE)
)
starwars
# SOLUTION-4
mtcars
# SOLUTION - 5
summarise(
select(
group_by(mtcars,cyl),
disp,hp
),
disp = mean(disp),
hp = mean(hp)
)
# Solution - 6
batting$Team
library(rvest)
library(tidyverse)
html <- read_html("https://bwf.tournamentsoftware.com/ranking/category.aspx?id=36352&category=473&C473FOC=&p=1&ps=100")
foo <- html %>% html_table()
foo <- foo[[1]]
foo <- foo[-101, -c(2,3,4,6)]
foo$Rank <- as.numeric(foo$Rank)
by_conf <- foo %>% group_by(Confederation)
MY.confed_summary <- by_conf %>%
summarize(Avg_rank = mean(Rank), number = n()) %>%
arrange(Avg_rank)
MY.confed_summary
foo[1]
foo <- html %>% html_table()
foo <- foo[[1]]
foo
foo <- foo[-101, -c(2,3,4,6)]
foo
foo$Rank <- as.numeric(foo$Rank)
by_conf <- foo %>% group_by(Confederation)
MY.confed_summary <- by_conf %>%
summarize(Avg_rank = mean(Rank), number = n()) %>%
arrange(Avg_rank)
View(MY.confed_summary)
library(rvest)
library(tidyverse)
# Solution - 1
html <- read_html("https://tldv.io/app/meetings/650ee24cbbbf63001332c3e7")
text <- html%>%html_elements(".sc-fYEEdK.kylWpz.transcript-word")
library(rvest)
library(tidyverse)
# Solution - 1
html <- read_html("https://tldv.io/app/meetings/650ee24cbbbf63001332c3e7")
text <- html%>%html_elements(".sc-fYEEdK")
text <- html%>%html_elements(".sc-fYEEdK")
text <- html%>%html_table()
shiny::runApp('MTH208/class-project-group_2/Group-2_Anime_Project')
?dashboardPage
runApp('MTH208/class-project-group_2/Group-2_Anime_Project')
runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
runExample("07_widgets")    # help text and submit buttons
runExample("08_html")       # Shiny app built from HTML
runExample("09_upload")     # file upload wizard
runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer
runApp('MTH208/class-project-group_2/Group-2_Anime_Project')
runApp('MTH208/class-project-group_2/Group-2_Anime_Project')
MainData <- read.csv("../Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
setwd("~/MTH208/class-project-group_2/Group-2_Anime_Project")
MainData <- read.csv("../Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
View(MainData)
unique(MainData$Source)
table(MainData$Source)
MainData <- read.csv("../Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
categories <- table(MainData$Source)
categories
categories[1]
categories[1][1]
categories[1,``]
categories[1,1]
categories[1]
runApp()
runApp()
MainData <- read.csv("../Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
View(MainData)
plot(MainData)
plot(MainData$Release.Year, MainData$Score)
plot(MainData$Release.Year, MainData$Score, col = MainData$Source)
library(ggplot2)
ggplot(MainData, mapping = aes(MainData$Release.Year, MainData$Score))+
geom_point(mapping = aes( col = MainData$Source))
runApp()
ggplot(MainData, mapping = aes(MainData$Episode.Count, MainData$Score))+
geom_point(mapping = aes( col = MainData$Source))
runApp()
Ecount <- which(MainData$Episode.Count <100)
# draw the histogram with the specified number of bins
ggplot(MainData, mapping = aes(Ecount, Score))+
geom_point(mapping = aes( col = Source))
Ecount <- which(MainData$Episode.Count <100 , arr.ind = TRUE)
subdata <- MainData[Ecount]
Ecount <- which(MainData$Episode.Count <100 , arr.ind = TRUE)
subdata <- MainData[Ecount]
Ecount <- which(MainData$Episode.Count <100 , arr.ind = TRUE)
Ecount
MainData[1]
MainData[,1]
MainData[,,1]
?subset
subdata <- subset(MainData, MainData$Episode.Count <100 )
subdata
subdata <- subset(MainData, MainData$Episode.Count <100 )
# draw the histogram with the specified number of bins
ggplot(subdata, mapping = aes(Episode.Count, Score))+
geom_point(mapping = aes( col = Source))
subdata <- subset(MainData, MainData$Episode.Count <50 )
# draw the histogram with the specified number of bins
ggplot(subdata, mapping = aes(Episode.Count, Score))+
geom_point(mapping = aes( col = Source))
runApp()
library(imager)
library(rvest)
html <- read_html("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
my
html <- read_html("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
my.image <- load.image("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
html
html <- read_html("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
img.link <- html%>%html_element("img")%>%html_attr("src")
my.image <- load.image(img.link)
html <- read_html("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
img.link <- html%>%html_element(".img")%>%html_attr("src")
html <- read_html("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
img.link <- html%>%html_element("img.")%>%html_attr("src")
img.link <- html%>%html_attr("src")
?html_node
img.link <- html%>%html_node(xpath = 'img')%>%html_attr('src')
img.link <- html%>%html_attr('img')
img.link
img.link <- html
img.link
img.link[[2]]
img.link[[1]]
html <- read_html("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
img.link <- html%>%html_nodes(xpath = '//img')
img.link
img.link <- html%>%html_element(xpath = "//img")
img.link <- html%>%html_element("img")
page <- read_html("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
node <- html_nodes(page,xpath = '//img')
my.img = load.image("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
install.packages("magick")
my.img = load.image("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
my.img = load.image("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
library(magick)
clear
my.img <- image_read_svg('http://jeroen.github.io/images/tiger.svg', width = 350)
str(magick::magick_config())
library(magick)
tiger <- image_read_svg('http://jeroen.github.io/images/tiger.svg', width = 350)
library(imager)
library(magick)
tiger <- image_read_svg('http://jeroen.github.io/images/tiger.svg', width = 350)
load.image("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
image_convert("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a", "png")
image_read("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
my.img <- image_read("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
plot(my.img)
library(imager)
library(magick)
my.img <- image_read("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
diff.col <- function(img)
{
col.mat <- as.array(img[, , 1, ])
dims <- dim(col.mat)
# Calculates the amt of each color
rtot <- 0
gtot <- 0
btot <- 0
for(i in 1:dims[1])
{
for(j in 1:dims[2])
{
# calculates the partial sum of all the colors
rtot <- rtot + col.mat[i,j, 1]
gtot <- gtot + col.mat[i,j, 2]
btot <- btot + col.mat[i,j, 3]
}
}
# return the distance matrix of each pixel
tot = sum(c(rtot, gtot, btot))
return(c(rtot/tot, gtot/tot, btot/tot))
}
diff.col(my.img)
my.img <- image_read("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
as.array(my.img[, , 1, ])
as.cimg(my.img)
image_graph()
magick2cimg(my.img)
my.img <- magick2cimg(my.img)
my.img
library(imager)
library(magick)
my.img <- image_read("https://cdn.myanimelist.net/r/50x70/images/anime/1208/94745.jpg?s=7892d01b6c74f1bf945f7a3ff3bb1f6a")
my.img <- magick2cimg(my.img)
diff.col <- function(img)
{
col.mat <- as.array(img[, , 1, ])
dims <- dim(col.mat)
# Calculates the amt of each color
rtot <- 0
gtot <- 0
btot <- 0
for(i in 1:dims[1])
{
for(j in 1:dims[2])
{
# calculates the partial sum of all the colors
rtot <- rtot + col.mat[i,j, 1]
gtot <- gtot + col.mat[i,j, 2]
btot <- btot + col.mat[i,j, 3]
}
}
# return the distance matrix of each pixel
tot = sum(c(rtot, gtot, btot))
return(c(rtot/tot, gtot/tot, btot/tot))
}
diff.col(my.img)
dat <- read.csv("Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
setwd("~/MTH208/class-project-group_2")
dat <- read.csv("Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
img.links <- dat$Image.URLs
for(link in img.links[1:50]){
print(link)
}
img.links <- dat$Image.URLs
for(link in img.links[1:50]){
my.img <- image_read(link)
my.img <- magick2cimg(my.img)
print(diff.col(my.img))
}
dat <- read.csv("Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
# Iterating through all the links
img.links <- dat$Image.URLs
dat$Percent.red <- 1:1e3
dat$Percent.blue <- 1:1e3
dat$Percent.green <- 1:1e3
dat
for(i in 1:1e3){
my.img <- image_read(img.links[i])
my.img <- magick2cimg(my.img)
cols <- diff.col(my.img)
dat$Percent.red[i] <- cols[1]
dat$Percent.blue[i] <- cols[2]
dat$Percent.green[i] <- cols[3]
}
View(dat)
write(dat, file = "Finaldata.Rdata")
write(dat, file = "Finaldata")
save(dat)
save(dat, file = "Finaldata.Rdata")
write.csv(dat,file="Finaldata.csv")
?selectInput
MainData <- read.csv("../Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
setwd("~/MTH208/class-project-group_2/Group-2_Anime_Project")
MainData <- read.csv("../Data\ Scraping\ and\ Cleaning/Anime\ Dataframe.csv")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?switch
runApp()
