library(rvest)
library(tidyverse)
# Solution - 1
html <- read_html("https://www.iitk.ac.in/math/visitors-post-doctoral-fellow")
name <- html %>% html_elements(".head2") %>% html_text()
name
# Solution - 2
html <- read_html("https://www.imdb.com/chart/top")
movies <- html %>% html_elements(".ipc-metadata-list.ipc-metadata-list--dividers-between.sc-3f13560f-0 sTTRj.compact-list-view ipc-metadata-list--base")
movies
movies <- html %>% html_elements(".ipc-title__text")
movies
movies <- html %>% html_elements(".ipc-title__text") %% html_text()
movies <- html %>% html_elements(".ipc-title__text") %>% html_text()
movies
movies <- movies[1:250]
movies
movies <- movies[3:253]
movies
movies <- html %>% html_elements(".ipc-title__text") %>% html_text()
movies <- movies[3:253]
movies
movies <- movies[3:252]
movies
movies <- html %>% html_elements(".ipc-title__text") %>% html_text()
movies <- movies[3:252]
movies
?strsplit
movies[1]
strspit(movies[1],as.character(1))
strsplit(movies[1],as.character(1))
strsplit(movies[1],as.character(1))[[1]]
strsplit(movies[1],as.character(1))[[1]][2]
names <- sapply(movies, function(k) strsplit(movies[k],as.character(k))[[1]][2])
names <- substring(names, 3)
names
movies <- html %>% html_elements(".ipc-title__text") %>% html_text()
movies <- movies[3:252]
movies
names <- sapply(movies, function(k) strsplit(movies[k],as.character(k))[[1]][2])
names
names <- sapply(1:250, function(k) strsplit(movies[k],as.character(k))[[1]][2])
names
names <- substring(names, 3)
names
# Solution - 3
html <- read_html("https://www.imdb.com/chart/top")
movie_year <- html%>%html_elements(".sc-b51a3d33-6.faLXbD.cli-title-metadata-item")%>%html_text()
movie_year
movie_year[1]
movie_year[2]
movie_year[3]
movie_year[4]
movie_year <- movie_year[::3]
movie_year <- movie_year[seq(1,length(movie_year),3)]
movie_year
# Solution - 3
html <- read_html("https://www.imdb.com/chart/top")
movie_year <- html%>%html_elements("sc-b85248f1-6.bnDqKN.cli-title-metadata-item")%>%html_text()
movie_year
movie_year <- html%>%html_elements(".sc-b85248f1-6.bnDqKN.cli-title-metadata-item")%>%html_text()
movie_year <- movie_year[seq(1,length(movie_year),3)]
movie_year
movie_year <- html%>%html_elements(".sc-b85248f1-6.bnDqKN.cli-title-metadata-item")%>%html_text()
movie_year <- movie_year[seq(1,length(movie_year),3)]
movie_year <- html%>%html_elements(".sc-b85248f1-6.bnDqKN.cli-title-metadata-item")%>%html_text()
movie_year
movie_year <- html%>%html_elements(".sc-b51a3d33-6.faLXbD.cli-title-metadata-item")%>%html_text()
movie_year
movie_year <- movie_year[seq(1,length(movie_year),3)]
years <- array(NA,dim = 250)
for(i in 1:length(movie_year)){
if (length(movie_year[i]) == 4){
years.append(movie_year[i])
}
}
years
info <- html %>%
html_elements(".sc-b85248f1-6.bnDqKN.cli-title-metadata-item") %>%
html_text()
info
# Ratings
ratings <- html%>% html_element(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb")
library(tidyverse)
library(rvest)
html <- read_html("https://www.imdb.com/chart/top")
movies <- html %>% html_elements(".ipc-lockup-overlay.ipc-focusable")%>%html_attr("href")
# Ratings
ratings <- html%>% html_element(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb")
ratings
# Ratings
ratings <- html%>% html_element(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb")%>%html_text()
ratings
# Ratings
ratings <- html%>% html_element(".ipc-rating-star.ipc-rating-star--base")%>%html_text()
ratings
# Ratings
ratings <- html%>% html_elements(".ipc-rating-star")%>%html_text()
ratings
# Ratings
ratings <- html%>% html_elements(".ipc-rating-star.ipc-rating-star--base")%>%html_text()
ratings
# Ratings
ratings <- html%>% html_elements(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb")%>%html_text()
ratings
substring(ratings[1],1,3)
ratings <- substring(ratings,1,3)
ratings
ratings <- as.numeric(ratings)
ratings
#Unweighted mean Ratings
unweighted <- numeric(250)
for(title_ in addresses){
html <- read_html(title_)
rating <- html%>%html_element(".sc-32706d9c-1.dRWuAv")%>%html_text()
rating <- substring(rating, 1,3)
unweighted[i] = (rating)
}
movies <- html %>% html_elements(".ipc-lockup-overlay.ipc-focusable")%>%html_attr("href")
movies
titles <- substring(movies,8,16)
addresses <- paste0("https://www.imdb.com/title/",titles,"/ratings")
#Unweighted mean Ratings
unweighted <- numeric(250)
for(title_ in addresses){
html <- read_html(title_)
rating <- html%>%html_element(".sc-32706d9c-1.dRWuAv")%>%html_text()
rating <- substring(rating, 1,3)
unweighted[i] = (rating)
}
# Making the dataframe
movie.data <- data.frame(titles, ratings, unweighted)
movie.data
html <- read_html("https://www.boxofficemojo.com/chart/top_lifetime_gross")
ta_ble <- html_table(html)
ta_ble
print(ta_ble)
setwd("~/MTH208/worksheet-7-Zehaan22")
write.csv(ta_ble, file = "High_gross.csv", row.names = FALSE)
library(rvest)
library(dplyr)
#getting the data
icc_html = read_html("https://www.icc-cricket.com/rankings/womens/player-rankings/odi/batting")
batting = icc_html %>%html_table()
length(batting)
batting[[1]]
length(batting[[1]])
top_100_batters = batting[[1]]["Player"]
top_100_batters
batting <- batting[[1]]
batting$Pos <- 1:100
top_100_batters = batting["Player"]
top_100_batters
#Solution-2
batting
starwars %>% filter(skin_color == "light", eye_color == "brown")
starwars %>% arrange(height, mass)
starwars %>% arrange(desc(height))
starwars %>% slice(5:10)
starwars %>% slice_head(n = 3)
starwars %>% slice_sample(n = 5)
starwars %>% slice_sample(prop = 0.1)
starwars %>%
filter(!is.na(height)) %>%
slice_max(height, n = 3)
starwars %>% mutate(height_m = height / 100)
starwars %>% summarise(height = mean(height, na.rm = TRUE))
starwars
a1 <- group_by(starwars, species, sex)
a2 <- select(a1, height, mass)
a3 <- summarise(a2,
height = mean(height, na.rm = TRUE),
mass = mean(mass, na.rm = TRUE)
)
a3
starwars %>%
group_by(species, sex) %>%
select(height, mass) %>%
summarise(
height = mean(height, na.rm = TRUE),
mass = mean(mass, na.rm = TRUE)
)
# SOLUTION-4
mtcars
# SOLUTION - 5
summarise(
select(
group_by(mtcars,cyl),
disp,hp
),
disp = mean(disp),
hp = mean(hp)
)
# Solution - 6
batting$Team
starwars
starwars%>%group_by(species,sex)
starwars%>%group_by(species,sex)[1]
starwars%>%group_by(species,sex)[[1]]
starwars%>%group_by(species,sex)
(starwars%>%group_by(species,sex))[1]
(starwars%>%group_by(species,sex))[[1]]
starwars%>%group_by(species)
starwars%>%group_by(species)%>%summarise()
starwars%>%group_by(species)%>%summarise(n = n())
starwars%>%group_by(species,sex)%>%summarise(n = n())
library(tidyverse)
library(rvest)
html <- read_html("https://myanimelist.net/topanime.php")
nime.Table <- html%>%html_table()
Anime.Table <- html%>%html_table()
library(tidyverse)
library(rvest)
html <- read_html("https://myanimelist.net/topanime.php")
Anime.Table <- html%>%html_table()
Anime.Table
library(dplyr)
Anime.Table <- Anime.Table[[1]]
Anime.Table <- rename(Anime.Table, X1 = "Rank", X2 = "Title" , X3 = "Score", X5 = "Stats")
Anime.Table <- rename(Anime.Table, Rank = X1, Title = X2 , Score = X3, Stats = X5)
Anime.Table
Anime.Table <- Anime.Table[-1,-4]
Anime.Table
Anime.Table$Rank <- c(1:50)
Anime.Table
Anime.Table[1,]
Anime.Table$Title[1,]
Anime.Table$Title[1]
Anime.Table$Score <- as.numeric(Anime.Table$Score)
Anime.Table$Stats[1]
html <- read_html("https://myanimelist.net/topanime.php")
Anime.Table <- html%>%html_table()
Anime.Table <- Anime.Table[[1]]
Anime.Table <- rename(Anime.Table, Rank = X1, Title = X2 , Score = X3)
Anime.Table <- Anime.Table[-1,-c(4,5)] #Eliminating the first row and a useless column
Anime.Table$Rank <- c(1:50)
Anime.Table$Score <- as.numeric(Anime.Table$Score)
Anime.Table
#Cleaning the Data
words = Anime.Table$Title[1]
#Cleaning the Data
words = Anime.Table$Title[1]
words = strsplit(words, split = "\n")
words
words = Anime.Table$Title[2]
words = strsplit(words, split = "\n")
words
Anime.Table = Anime.Table%>%
mutate(ShowTitle = Title,
Catagory = Title,
Airtime = Title,
Members = Title,
)
for(i in 1:50){
words = Anime.Table$Title[i]
words = strsplit(words, split = "\n")
anime.name = words[1]
anime.catag = words[2]%>%substring(9)
anime.airtime = words[2]%>%substring(9)
anime.members = words[2]%>%substring(9)
Anime.Table$ShowTitle = anime.name
Anime.Table$Members[i] = anime.members
Anime.Table$Catagory = anime.catag
Anime.Table$Airtime = anime.airtime
}
Anime.Table
for(i in 1:50){
words = Anime.Table$Title[i]
words = strsplit(words, split = "\n")
anime.name = words[1]
anime.catag = substring(words[2],9)
anime.airtime = substring(words[3],9)
anime.members = substring(words[4],9)
Anime.Table$ShowTitle = anime.name
Anime.Table$Members[i] = anime.members
Anime.Table$Catagory = anime.catag
Anime.Table$Airtime = anime.airtime
}
Anime.Table
words = Anime.Table$Title[1]
words = strsplit(words, split = "\n")
anime.name = words[1]
anime.catag = substring(words[2],9)
anime.airtime = substring(words[3],9)
anime.members = substring(words[4],9)
anime.name
for(i in 1:50){
words = Anime.Table$Title[i]
words = strsplit(words, split = "\n")
words = words[[1]]
anime.name = words[1]
anime.catag = substring(words[2],9)
anime.airtime = substring(words[3],9)
anime.members = substring(words[4],9)
Anime.Table$ShowTitle = anime.name
Anime.Table$Members[i] = anime.members
Anime.Table$Catagory = anime.catag
Anime.Table$Airtime = anime.airtime
}
Anime.Table
for(i in 1:50){
words = Anime.Table$Title[i]
words = strsplit(words, split = "\n")
words = words[[1]]
anime.name = words[1]
anime.catag = substring(words[2],9)
anime.airtime = substring(words[3],9)
anime.members = substring(words[4],9)
Anime.Table$ShowTitle[i] = anime.name
Anime.Table$Members[i] = anime.members
Anime.Table$Catagory[i] = anime.catag
Anime.Table$Airtime[i] = anime.airtime
}
Anime.Table
Anime.Table[-2]
# Removing the title column
Anime.Table = Anime.Table[-2]
foo <- as.numeric(gsub("\\D", "", Anime.Table$Members))
foo
# Correcting the members column
Anime.Table$Members <- as.numeric(gsub("\\D", "", Anime.Table$Members))
View(Anime.Table)
# Getting the number of episodes
foo <- as.numeric(gsub("\\D", "", Anime.Table$Catagory))
foo
Anime.Table <- mutate(Anime.Table, Eps = foo)
View(Anime.Table)
words = Anime.Table$Catagory[1]
words = strsplit(words, split = " (")
words = Anime.Table$Catagory[1]
words = strsplit(words, split = " ")
words = words[[1]]
anime.catag = words[1]
anime.catag
#Sorting the Catagory
for(i in 1:50){
words = Anime.Table$Catagory[i]
words = strsplit(words, split = " ")
words = words[[1]]
anime.catag = words[1]
Anime.Table$Catagory[i] = anime.catag
}
##########################
image.data <- html%>%html_elements(". lazyloaded")%>%html_attr("src")
##########################
image.data <- html %>% html_elements(". lazyloaded")%>%html_attr("src")
##########################
image.data <- html %>% html_elements(".lazyloaded")%>%html_attr("src")
image.data
##########################
image.data <- html %>% html_elements(".hoverinfo_trigger fl-l ml12 mr8")%>%html_text()
image.data
##########################
image.data <- html %>% html_elements(".hoverinfo_trigger.fl-l.ml12.mr8")%>%html_text()
image.data
##########################
image.data <- html %>% html_elements(".hoverinfo_trigger.fl-l.ml12")%>%html_text()
image.data
##########################
image.data <- html %>% html_elements(".hoverinfo_trigger")%>%html_text()
image.data
##########################
image.data <- html %>% html_elements(".hoverinfo_trigger.fl-l")%>%html_text()
image.data
##########################
image.data <- html %>% html_elements(".hoverinfo_trigger.fl-l")%>%html_attr("href")
image.data
Anime.Table <- mutate(Anime.Table, DetailURL = image.data)
View(Anime.Table)
# Writing the data in a csv file
write_csv(Anime.Table,file = "AnimeData.csv")
setwd("~/MTH208/class-project-group_2")
# Writing the data in a csv file
write_csv(Anime.Table,file = "AnimeData.csv")
